1. 基於 LangChain 框架來呼叫 OpenAI API

2. LangChain 整合了 LangSmith 功能，以追蹤和分析 LLM 調用的工具
    a. 每次的 Prompt 及 Response
    b. Token 使用情況
    c. Latency and Errors
    d. 因為 openai api 並不會提供上述的功能

3. About the meaning of "Invoke" method
    a. "Invoke" is like a list of Message object, encapsulating the different types of needs, like SystemMessage and HumanMessage
    b. With Invoke, we can send multiple messages to the language model in a structured format
    c. Receive a single, consolidated response from the model with prompt

4. **ChatPromptTemplate** has different methods
    a. ChatPromptTemplate.from_messages()
        (1) application：適用於同時要定義多個角色訊息，如「system」、「user」、「assistant」、「function」等）的情境
        (2) limitation：需要以 list/tuple 的形式明確指定每個訊息 (message) 與對應的角色 (role)
        (3) example：
        ChatPromptTemplate.from_messages([
            ("system", "Translate the following from English into {language}"),
            ("user", "{text}")
        ])
        (4) assumption：需要在一個 ChatPrompt 裡安插多條訊息（包含 system、user、assistant 等），或需要多段範例、few-shot、上下文，就選擇 from_messages()
        
    b. ChatPromptTemplate.from_template()
        (1) application：更單純的「單一模板」。通常用在只需要一個角色（常見是 user 或 system）即可完成的提示。
        (2) limitatioin：一次只能生成「一個訊息」(例如整段都視為 user 消息或 system 消息)
        (3) example：
        ChatPromptTemplate.from_template("Question: {question}\n{answer}")
        (4) assumption：只需要一條訊息的模板（例如簡單的翻譯指令、單一問題提示），那麼 from_template() 就能快速完成。

5. FewShotPromptTemplate v.s. FewShotChatMessagePromptTemplate
    a. 兩者不一樣，前者為舊版，後者為新版
    b. FewShotPromptTemplate 目前不支援拿 ChatPromptTemplate 當 example_prompt
    c. 重要 !!! （依照模型的順序撰寫工具）
       若要讓 Few-Shot Example 實際應用在模型中，則會需要用到
        (1) ChatOpenAI：建立 LLM
        (2) Few-Shot Example：用 List 來建立模型所需的 Few-Shot Examples
        (3) ChatPromptTemplate：用來定義 Normal Prompt Template
        (4) FewShotChatMessagePromptTemplate：用來定義 Few-Shot Prompt Template 
        (5) ChatPromptTemplate：用來定義 Final Prompt
        (6) chain, "|" ：為 pineline 的概念
    d. 可以根據需求製作 Static Model 或是 Dynamic Model 
        (1)

6. Key methods for chat model
    a. invoke：
        (1) Primary method to interact with model.
        (2) Takes a list of messages as input and returns a list of messages as output.
    b.stream：
        (1) Allows to stream the output of generations.
    c.batch 批次：
        (1) Handles multiple input requests simultaneously.
        (2) Allows for more efficient processing
    d.with_structured_output：
        (1) Binding the defined schema to the model and parsing the output.

7. Documents Loading
    a. Documents must to be in local 
    b. PDF File with "from langchain_community.document_loaders import PyPDFLoader"
